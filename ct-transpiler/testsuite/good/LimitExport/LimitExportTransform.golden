{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module LimitExport (Piece(Cons), composable_types_constructor_Cons) where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified ComposableTypes

data Piece composable_types_recursive_var = Cons Int

composable_types_constructor_Cons ::
                                    ComposableTypes.PartOf Piece g => Int -> g
composable_types_constructor_Cons arg_1
  = ComposableTypes.inject' (Cons arg_1)
cons = composable_types_constructor_Cons 0
