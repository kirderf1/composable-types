{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module TyVarFInDecl where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified ComposableTypes

class Composable_types_inner_class_eval f f where
        composable_types_class_function_eval ::
                                               (Composable_types_inner_class_eval g f) =>
                                               f (Data.Comp.Term g) -> f

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_inner_class_eval]
  )

class Composable_types_outer_class_eval t f where
        eval :: t -> f

instance Composable_types_inner_class_eval g f =>
         Composable_types_outer_class_eval (Data.Comp.Term g) f
         where
        eval = composable_types_class_function_eval . Data.Comp.unTerm
