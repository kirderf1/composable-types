{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module ContextInExt where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified ComposableTypes

data B composable_types_recursive_var = C composable_types_recursive_var

composable_types_constructor_C ::
                                 ComposableTypes.PartOf B g => g -> g
composable_types_constructor_C arg_1
  = ComposableTypes.inject' (C arg_1)

class Composable_types_inner_class_d f where
        composable_types_class_function_d ::
                                            (Composable_types_inner_class_d g) =>
                                            f (Data.Comp.Term g) -> ()

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_inner_class_d]
  )

class Composable_types_outer_class_d t where
        d :: t -> ()

instance Composable_types_inner_class_d g =>
         Composable_types_outer_class_d (Data.Comp.Term g)
         where
        d = composable_types_class_function_d . Data.Comp.unTerm

instance () => Composable_types_inner_class_d B where
        composable_types_class_function_d (C a) = d a
