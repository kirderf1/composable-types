{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module EvalNum where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified ComposableTypes

data Const composable_types_recursive_var = Const Int

composable_types_constructor_Const ::
                                     ComposableTypes.PartOf Const g => Int -> g
composable_types_constructor_Const arg_1
  = ComposableTypes.inject' (Const arg_1)

class (Num e) => Composable_types_inner_class_evalNum f e where
        composable_types_class_function_evalNum ::
                                                  (Composable_types_inner_class_evalNum g e) =>
                                                  f (Data.Comp.Term g) -> e

$(
  Data.Comp.Derive.derive [Data.Comp.Derive.liftSum]
    [''Composable_types_inner_class_evalNum]
  )

class (Num e) => Composable_types_outer_class_evalNum t e where
        evalNum :: t -> e

instance Composable_types_inner_class_evalNum g e =>
         Composable_types_outer_class_evalNum (Data.Comp.Term g) e
         where
        evalNum
          = composable_types_class_function_evalNum . Data.Comp.unTerm

instance Composable_types_inner_class_evalNum Const Int where
        composable_types_class_function_evalNum (Const i) = i
