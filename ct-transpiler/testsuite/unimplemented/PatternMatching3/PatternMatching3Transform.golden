{-# LANGUAGE TemplateHaskell #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE UndecidableInstances #-}
module PatternMatching3 where
import qualified Data.Comp
import qualified Data.Comp.Derive
import qualified ComposableTypes

data B composable_types_recursive_var = B Int

composable_types_constructor_B ::
                                 ComposableTypes.PartOf B g => Int -> g
composable_types_constructor_B arg_1
  = ComposableTypes.inject' (B arg_1)

data C composable_types_recursive_var = C

composable_types_constructor_C :: ComposableTypes.PartOf C g => g
composable_types_constructor_C = ComposableTypes.inject' C

d :: ComposableTypes.PartOf B a => a -> Int
d composable_types_var
  = d' (ComposableTypes.project' composable_types_var)

d' :: ComposableTypes.PartOf B a => Maybe (B a) -> Int
d' (Just (B i)) = i
d' Nothing = 0
